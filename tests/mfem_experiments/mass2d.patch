diff --git a/fem/tbilinearform.hpp b/fem/tbilinearform.hpp
index 6589871..c67b5b1 100644
--- a/fem/tbilinearform.hpp
+++ b/fem/tbilinearform.hpp
@@ -20,6 +20,19 @@
 #include "tcoefficient.hpp"
 #include "fespace.hpp"
 
+void add_mult_mass_2d(
+   int ndof_1d,      /* number of 1D dofs (points) */
+   int nqpt_1d,      /* number of 1D quadrature points */
+   int nelem,        /* number of elements */
+   double *D,        /* nqpt_1d x nqpt_1d x nelem */
+   double *B1d,      /* nqpt_1d x ndof_1d dense matrix, column-major layout */
+   double *B1d_t,    /* trasnspose of B1d */
+   int *dof_offsets, /* array of size ndofs_1d x ndofs_1d x nelem representing a
+                       boolean P */
+   double *x,        /* input vector */
+   double *y         /* result, input-output vector */
+);
+
 namespace mfem
 {
 
@@ -121,8 +134,28 @@ public:
    {
       if (assembled_data)
       {
+#ifndef MFEM_EXPERIMENT_1
          const int num_elem = 1;
          MultAssembled<num_elem>(x, y);
+#else
+         MFEM_VERIFY(solFE_type::geom == Geometry::SQUARE, "");
+
+         y = 0.0;
+         add_mult_mass_2d(
+            solFE_type::dofs_1d,       /* number of 1D dofs (points) */
+            IR::qpts_1d,               /* number of 1D quadrature points */
+            mesh.GetNE(),              /* number of elements */
+            (double *)assembled_data,  /* nqpt_1d x nqpt_1d x nelem */
+            solEval.Get_B_1D(),        /* nqpt_1d x ndof_1d dense matrix,
+                                          column-major layout */
+            solEval.Get_Bt_1D(),       /* trasnspose of B1d */
+            solFES.GetIndexer().GetElemDof(),
+                                       /* array of size ndofs_1d x ndofs_1d x
+                                          nelem representing a boolean P */
+            x.GetData(),               /* input vector */
+            y.GetData()                /* result, input-output vector */
+         );
+#endif
       }
       else
       {
diff --git a/fem/tevaluator.hpp b/fem/tevaluator.hpp
index 5d1abcc..79cce07 100644
--- a/fem/tevaluator.hpp
+++ b/fem/tevaluator.hpp
@@ -605,6 +605,8 @@ public:
       }
 #endif
    }
+   double *Get_B_1D() const { return const_cast<double *>(B_1d.data); }
+   double *Get_Bt_1D() const { return const_cast<double *>(Bt_1d.data); }
 };
 
 // ShapeEvaluator with 3D tensor-product structure
diff --git a/fem/tfespace.hpp b/fem/tfespace.hpp
index 1e7bc5e..cf8158f 100644
--- a/fem/tfespace.hpp
+++ b/fem/tfespace.hpp
@@ -103,6 +103,8 @@ public:
    {
       return loc_dof_list[loc_dof_idx + elem_offset * FE::dofs];
    }
+
+   int *GetElemDof() const { return const_cast<int *>(el_dof_list); }
 };
 
 
@@ -399,6 +401,8 @@ public:
    {
       return Matches(fes) && vec_layout_t::Matches(fes);
    }
+
+   typename base_class::index_type &GetIndexer() { return base_class::ind; }
 };
 
 
